@model IEnumerable<EnjoyEat.Models.ViewModel.MenuViewModel>
@section Styles
    {
    <link href="~/orderforhere/startordercss/barfiller.css" rel="stylesheet" />
    <link href="~/orderforhere/startordercss/bootstrap.min.css" rel="stylesheet" />
    <link href="~/orderforhere/startordercss/elegant-icons.css" rel="stylesheet" />
    <link href="~/orderforhere/startordercss/flaticon.css" rel="stylesheet" />
    <link href="~/orderforhere/startordercss/magnific-popup.css" rel="stylesheet" />
    <link href="~/orderforhere/startordercss/nice-select.css" rel="stylesheet" />
    <link href="~/orderforhere/startordercss/slicknav.min.css" rel="stylesheet" />
    <link href="~/css/style.min.css" rel="stylesheet">
    <link href="~/css/orderstyle.css" rel="stylesheet" />
    <style>
        #orderArea {
            display: flex;
            justify-content: space-evenly;
            padding-top: 0;
        }

        .section-bg {
            background-color: #1a1814;
        }

        .product__item {
            text-align: center;
        }

        #orderItem {
            position: sticky;
            /*top: 116px;*/
            z-index: 990;
            transition: top 0.5s ease;
            border: 2px solid #cda45e;
            border-radius: 5px;
            padding: 0px;
            background-color: #111111
        }

        .orderRow {
            display: flex;
            justify-content: center;
            align-items: center;
            flex-wrap: nowrap;
            
        }

        #menu-flters li, #menu-flters-sub li {
            margin: 0px; 
            list-style:none;
            line-height: 0.8;
        }

        #menu-flters, #menu-flters-sub {
            display: flex;
            justify-content: space-evenly;
            flex-wrap: wrap;
            width: 50%; 
        }

        .cartIcon {
            position: absolute;
            right: 30px;
            top: 60%;
            transform: translateY(-50%);
        }

        .modal-content {
            background-color: #cda45e;
        }

        .btn-secondary {
            color: #fff;
            background-color: #0c0b09
        }

        .btn-secondary a {
            color: #fff;
        }

        .sub-filter-active {
            background-color: darkorange;
            color: #fff;
            border-radius: 5px;
            padding: 6px 10px 4px;
        }

    </style>
}

<div id="app">
    @* Order Area *@
    <div class="section-title">
        <h2>外帶點餐</h2>
        <p>歡迎查看美味的菜單</p>
    </div>
    <!-- 菜單類別選擇列 -->
    <section id="orderItem" class="menu">
        <div class="orderRow" data-aos="fade-up" data-aos-delay="100">
            <!-- 主類別選擇列 -->
            <ul id="menu-flters">
                <li v-for="category in categories"
                    :key="category.categoryId"
                    v-if="categories"
                    :value="category.categoryId"
                    :class="{ 'filter-active': selectedCategoryId === category.categoryId }"
                    v-on:click="selectedCategoryId = category.categoryId">
                    {{ category.categoryName }}
                </li>
            </ul>
        </div>
        <div class="orderRow" data-aos="fade-up" data-aos-delay="100">
            <!--子類別選擇列-->
            <ul id="menu-flters-sub">
                <li v-for="subCategory in filteredSubCategories"
                    :key="subCategory.subCategoryId"
                    :value="subCategory.subCategoryId"
                    :class="{ 'sub-filter-active': selectedSubCategoryId === subCategory.subCategoryId }"
                    v-on:click="selectedSubCategoryId = subCategory.subCategoryId">
                    {{ subCategory.subCategoriesName }}
                </li>
            </ul>
        </div>
        <!-- 購物車按鈕 -->
        <div class="cartIcon">
            <button class="btn btn-link" type="button" data-bs-toggle="modal" data-bs-target="#cartModal" style="color:#FFFFFF">
                <i class="fa fa-cart-shopping"></i>
                <span class="badge rounded-pill bg-danger position-absolute top-0 start-100 translate-middle p-2">${{ total }}</span>
            </button>
            @*<button class="btn btn-link" type="button" data-bs-toggle="modal" data-bs-target="#RecepitModal" style="color:#FFFFFF">
            <i class="fa-solid fa-receipt"></i>
            </button>*@
        </div>
    </section>
    <!-- 菜單顯示區 -->
    <section class="shop spad menu section-bg" data-aos="fade-up">
        <div id="orderArea" class="row" data-aos="fade-up" data-aos-delay="100">
            <div v-for="product in filteredProducts" :key="product.productId" class="col-lg-3 col-md-6 col-sm-6 menu-item">
                <div class="product__item">
                    <div class="product__item__pic set-bg">
                        <img :src="product.mealImg" style="width:200px; border-radius:15px" />
                        <div class="product__label">
                            <span>{{getSubCategoryName(product.subCategoryId) }}</span>
                        </div>
                    </div>
                    <div class="product__item__text">
                        <h6><a href="#">{{product.productName}}</a></h6>
                        <div class="product__item__price">${{product.unitPrice}}</div>
                        <div class="cart_add">
                            <a href="#" v-on:click="openModal(product)">Add to cart</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section> 
    <!-- 數量編輯 -->
    <div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productModalLabel">數量編輯</h5>
                    <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="product__item__text">
                        <h4>{{ selectedProduct.productName }}</h4>
                        <div class="product__item__price text-light ">${{ selectedProduct.unitPrice }}</div>
                        <br/>
                        <div class="row justify-content-evenly">
                            <button type="button" class="col-2 btn btn-light btn-sm" v-on:click="removeFromCart(selectedProduct)"><i class="fa fa-minus"></i></button>
                            <span class="col-2">{{ getQuantity(selectedProduct) }}</span>
                            <button type="button" class="col-2 btn btn-light btn-sm" v-on:click="addToCart(selectedProduct)"><i class="fa fa-plus"></i></button>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
    @* Cart Modal *@
    <!-- 購物車跳窗 -->
    <div class="modal fade" id="cartModal" tabindex="-1" role="dialog" aria-labelledby="cartModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-scrollable" role="document">
            <div class="modal-content">
                <div class="modal-header border border-dark">
                    <h5 class="modal-title text-body" id="cartModalLabel">您的購物車內容</h5>
                    <button type="button" class="close text-body" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body text-body border border-dark">
                    <!--購物車品項的標題-->
                    <div class="row">
                        <div class="col-1">#</div>
                        <div class="col-7">餐點</div>
                        <div class="col-2">價格</div>
                        <div class="col-2">數量</div>
                    </div>
                    <br />
                    <!-- 購物車品項 -->
                    <div class="row cart-item" v-for="item in cart" :key="item.productId">
                        <button class="d-inline-block col-1" v-on:click="removeFromCart(item)"><i class="fa fa-minus"></i></button>
                        <p class="d-inline-block col-7">{{ item.productName }}</p>
                        <p class="d-inline-block col-2">{{ currency(item.unitPrice) }}</p>
                        <p class="d-inline-block col-2"> x {{ item.quantity }}</p>
                    </div>
                    <br />
                    <!-- 購物車總金額 -->
                    <p>總餐點數量: {{ totalQuantity }}</p>
                    <p>總金額: {{ currency(total) }}</p>

                </div>
                <div class="modal-footer text-body">

                    <!-- 結帳提交 -->
                    <button class="btn btn-dark" v-on:click="submit">結帳</button>
                    <button class="btn btn-dark" data-bs-dismiss="modal">繼續點餐</button>

                </div>
            </div>
        </div>
    </div>
    
</div>
@section Scripts
    {
    <script src="~/orderforhere/startorderjs/jquery.barfiller.js"></script>
    <script src="~/orderforhere/startorderjs/jquery.magnific-popup.min.js"></script>
    <script src="~/orderforhere/startorderjs/jquery.nicescroll.min.js"></script>
    <script src="~/orderforhere/startorderjs/jquery.slicknav.js"></script>
    <script src="~/orderforhere/startorderjs/jquery.nice-select.min.js"></script>
    <script src="~/orderforhere/startorderjs/jquery-3.3.1.min.js"></script>
    <script>
        window.addEventListener('scroll', () => {
            const element = document.querySelector('#orderItem');
            const scrollPosition = window.scrollY;
            if (window.innerWidth > 990) {
                element.style.top = scrollPosition < 530
                ? '116px' : '0px';
            }
            if (window.innerWidth <= 990 && window.innerWidth > 274) {
                element.style.top = scrollPosition < 450 ? '60px' : '0px';
            }
            if (window.innerWidth <= 274) {
                element.style.top = scrollPosition < 450 ? '88px' : '0px';
            }
        });
        Vue.config.devtools = true;
        var app = new Vue({
            el: '#app',
            data: {
                memberId:'',
                products: [],
                cart: [],
                cartId: '',
                total: 0,
                selectedCategoryId: '', // 選擇的大分類
                selectedSubCategoryId: '', // 選擇的子分類
                selectedProduct: [], // 選擇的產品
                categories: [], // 主類別清單
            },
            computed: {
                //利用flatmap+filter方法將符合目前所選擇大分類的對應子分類取出
                filteredSubCategories() {
                    if (this.selectedCategoryId) {
                        return this.categories.flatMap(category => category.subCategories).filter(subCategory => subCategory.categoryId === this.selectedCategoryId);
                    }
                    return [];
                },

                //利用filter方法將符合目前所選擇子分類的對應產品取出
                filteredProducts() {
                    if (this.selectedSubCategoryId) {
                        return this.products.filter(product => product.subCategoryId === this.selectedSubCategoryId);
                    }
                    return [];
                },

                //計算購物車內容的總餐點數量
                totalQuantity() {
                    if (this.cart) {
                        return this.cart.reduce((sum, item) => sum + item.quantity, 0);
                    }
                    return 0;
                }
            },
            methods: {
                //添加到購物車
                addToCart(product) {
                    if (!product || !product.productId || !product.unitPrice) {
                        alert('無效的商品資訊。');
                        return;
                    }
                    let cartItem = this.cart.find(item => item.productId === product.productId);
                    if (cartItem) {
                        this.$set(cartItem, 'quantity', cartItem.quantity + 1);
                    } else {
                        this.cart.push({ ...product, quantity: 1 });
                    }
                    this.total += product.unitPrice;
                    axios.post('/api/Menu/AddToCart', { memberId: this.memberId, productId: product.productId, quantity: 1 })
                        .catch(err => console.error(err));
                },
                //從購物車移除
                removeFromCart(product) {
                    let cartItem = this.cart.find(item => item.productId === product.productId);
                    if (cartItem) {
                        cartItem.quantity--;
                        if (cartItem.quantity === 0) {
                            this.cart = this.cart.filter(item => item.productId !== product.productId);
                        }
                        this.total -= product.unitPrice;
                        axios.post('/api/Menu/RemoveFromCart', { memberId: this.memberId, productId: product.productId, quantity: 1 })
                            .catch(err => console.error(err));
                    }
                },
                //取得餐點數量
                getQuantity(product) {
                    if (!product || !product.productId) {
                        return 0;
                    }
                    let cartItem = this.cart.find(item => item.productId === product.productId);
                    return cartItem ? cartItem.quantity : 0;
                },
                // 取得子分類名稱
                getSubCategoryName(subCategoryId) {
                    const subCategory = this.categories.flatMap(category => category.subCategories).find(subCategory => subCategory.subCategoryId === subCategoryId);
                    return subCategory ? subCategory.subCategoriesName : '';
                },
                // 取得產品
                openModal(product) {
                    this.selectedProduct = product;
                    $('#productModal').modal('show');
                },
                currency: function (value) {
                    var formatter = new Intl.NumberFormat('zh-TW', {
                        style: 'currency',
                        currency: 'TWD',
                        minimumFractionDigits: 0
                    });
                    return formatter.format(value);
                },
                //使用者按下提交按鈕後，把購物車資料送出，並且清空購物車資料(watch的cart會同步把後台購物車清空）
                submit() {
                    if (this.cart.length === 0) {
                        alert('您的購物車是空的，請先添加商品。');
                        return;
                    }
                    axios.post('/api/CreateOrder', this.cart).then(response => {
                        alert('訂單已送出');
                        this.cart = [];
                        this.total = 0;
                        window.location.href = '/CheckoutPage/?orderId=' + response.data.orderId;
                    }).catch(error => {
                        alert('送出失敗');
                    });
                }
            },
            watch: {
                //監聽大分類的變化，如果大分類被賦予新值，則預設顯示對應的第一個子分類
                selectedCategoryId: function (newValue) {
                    if (newValue) {
                        let category = this.categories.find(category => category.categoryId === newValue);
                        if (category && category.subCategories && category.subCategories.length > 0) {
                            this.selectedSubCategoryId = category.subCategories[0].subCategoryId;
                        }
                    }
                },
                //監聽購物車內容的變化，並將變化後的內容傳送至後端
                cart: {
                    handler: function (after, before) {
                        axios.post('/api/Menu/UpdateCart', { cartViewModel: after })
                            .then(response => {
                                console.log(response);
                            })
                            .catch(error => {
                                console.error(error);
                            });
                    },
                    deep: true
                }

            },
            created: function () {
                axios.get('/api/Menu/CategoriesWithSubs')
                    .then(response => this.categories = response.data)
                    .catch(err => {
                        console.error(err);
                        alert('無法獲取菜單類別，請稍後再試。');
                    });

                axios.get('/api/Menu/Products')
                    .then(response => this.products = response.data)
                    .catch(err => console.error(err));
                
                axios.post('/api/Menu/CreateCart')
                    .then(response => {
                        this.cartId = response.data;  // 將返回的購物車 ID 保存到數據中
                    })
                    .catch(error => {
                        console.error('購物車建立失敗:', error);
                    });
            },
        });
    </script>
    }