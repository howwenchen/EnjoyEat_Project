@using EnjoyEat.Areas.OrderForHere
@{
	ViewData["Title"] = "Ordering&ShoppingCart";
	Layout = "_Layout";
}

@section Styles{
    <style>
        .cart-button {
            position: fixed;
            bottom: 30px;
            right: 30px;
            z-index: 99; 
        }

        .shop__option__search{
            width: 100%;
            margin-bottom: 30px;
        }

        @@media (min-width: 577px) {
            .responsive-image{
                width: 200px;
                height: auto;
            }
        }

        @@media (max-width: 576px) {
            .responsive-image {
                display: inline-block; 
                width: 50%; 
                height: auto;
                box-sizing: border-box;
                padding: 5px; 
            }
        }

        .cart-item{
            line-height:0.6;
        }


    </style>

}
<div id="app">
    <section class="shop spad">
        <div class="container">
            <!-- 菜品分類選擇列 -->
            <div class="shop__option">
                <div class="row">
                    <div class="col-lg-7 col-md-7">
                        <div class="shop__option__search">
                            <form action="#">
                                <select v-model="selectedCategoryId" v-if="categories">
                                    <option disabled value="">---請選擇餐點分類---</option>
                                    <option v-for="category in categories" :value="category.categoryId">
                                        {{ category.categoryName }}
                                    </option>
                                    <span class="tableInfo">桌號: {{tableId}} </span>
                                    <span class="tableInfo">人數: {{capacity}} </span>
                                </select>
                            </form>
                        </div>
                        <div class="shop__option__search" v-if="selectedCategoryId">
                            <ul class="nav nav-tabs">
                                <li class="nav-item" v-for="subcategory in filteredSubCategories" :value="subcategory.subCategoryId">
                                    <a class="nav-link" v-on:click="selectedSubCategoryId = subcategory.subCategoryId" 
                                    v-bind:class="{ active: selectedSubCategoryId=== subcategory.subCategoryId }" 
                                    v-bind:id="subcategory.subCategoryId + '-tab'" 
                                    data-toggle="tab" v-bind:href="'#' + subcategory.subCategoryId" role="tab">
                                        {{ subcategory.subCategoriesName }}</a>
                                </li>
                            </ul>
                            
                            @*之後可以放子分類簡單說明
                            <div class="tab-content">
                                <div class="tab-pane fade" v-bind:class="{ 'show active': selectedSubCategoryId === subcategory.subCategoryId }" 
                                v-for="subcategory in filteredSubCategories" v-bind:id="subcategory.subCategoryId" role="tabpanel" :aria-labelledby="subcategory.subCategoryId + '-tab'">
                                    {{ subcategory.description }}
                                </div>
                            </div>*@
                        </div>
                    </div>
                </div>
            </div>


            <!-- 菜品清單 -->
            <div class="row align-items-center">
                <div class="col-lg-3 col-md-4 col-sm-6 mb-3" v-for="product in filteredProducts" :key="product.productId">
                    <div class="product__item">
                        <div class="product__item__pic set-bg">
                            <img class="responsive-image" v-bind:src="product.mealImg" style="border-radius:15px" />
                            <div class="product__label">
                                <span class="badge bg-secondary">{{ getSubCategoryName(product.subCategoryId) }}</span>
                            </div>
                        </div>
                        <div class="product__item__text">
                            <h6><a href="#">{{ product.productName }}</a></h6>
                            <div class="row">
                                <div class="product__item__price col">${{ product.unitPrice }}</div>
                                <div class="cart_add col justify-content-end align-items-center">
                                    <button class="btn btn-light btn-sm" v-on:click.prevent="removeFromCart(product)"><i class="fa fa-minus"></i></button>
                                    <span>{{ getQuantity(product) }}</span>
                                    <button class="btn btn-light btn-sm" v-on:click.prevent="addToCart(product)"><i class="fa fa-plus"></i></button>
                                </div>
                            </div>
                        </div>

					</div>
				</div>
			</div>

            <!-- 購物車觸發btn -->
            <button type="button" class="btn btn-dark cart-button border border-light position-realative" data-toggle="modal" data-target="#cartModal">
                <i class="fas fa-shopping-cart fa-lg" style="color:#cda45e"></i>
                <span class="badge rounded-pill bg-danger position-absolute top-0 start-100 translate-middle p-2">${{ total }}</span>
            </button>

            <!-- 購物車跳窗 -->
            <div class="modal fade" id="cartModal" tabindex="-1" role="dialog" aria-labelledby="cartModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-scrollable" role="document">
                    <div class="modal-content">
                        <div class="modal-header border border-dark">
                            <h5 class="modal-title text-body" id="cartModalLabel">您的購物車內容</h5>
                            <button type="button" class="close text-body" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body text-body border border-dark">
                            <!--購物車品項的標題-->
                            <div class="row">
                                <div class="col-1">#</div>
                                <div class="col-7">餐點</div>
                                <div class="col-2">價格</div>
                                <div class="col-2">數量</div>
                            </div>
                            <br/>
                            <!-- 購物車品項 -->
                            <div class="row cart-item" v-for="item in cart" :key="item.productId">
                                <button class="d-inline-block col-1" v-on:click="removeFromCart(item)"><i class="fa fa-minus"></i></button>
                                <p class="d-inline-block col-7">{{ item.productName }}</p>
                                <p class="d-inline-block col-2">{{ currency(item.unitPrice) }}</p>
                                <p class="d-inline-block col-2"> x {{ item.quantity }}</p>
                            </div>
                            <br/>
                            <!-- 購物車總金額 -->
                            <p>總餐點數量: {{ totalQuantity }}</p>
                            <p>總金額: {{ currency(total) }}</p>

                        </div>
                        <div class="modal-footer text-body">

                            <!-- 結帳提交 -->
                            <button class="btn btn-dark" v-on:click="submit">結帳</button>
                            <button class="btn btn-dark" data-dismiss="modal">繼續點餐</button>
                            
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>

@section Scripts{

    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="~/orderforhere/startorderjs/bootstrap.min.js"></script>
    <script src="~/orderforhere/startorderjs/jquery.barfiller.js"></script>
    <script src="~/orderforhere/startorderjs/jquery.magnific-popup.min.js"></script>
    <script src="~/orderforhere/startorderjs/jquery.nicescroll.min.js"></script>
    <script src="~/orderforhere/startorderjs/jquery.slicknav.js"></script>
    <script src="~/orderforhere/startorderjs/jquery.nice-select.min.js"></script>
    <script src="~/orderforhere/startorderjs/jquery-3.3.1.min.js"></script>
    <script src="~/orderforhere/startorderjs/main.js"></script>
    <script>
        new Vue({
            el: '#app',
            data: {
                products: [],
                cart: [],
                total: 0,
                selectedCategoryId: '', // 選擇的大分類
                selectedSubCategoryId: '', // 選擇的子分類
                categories: [], // 主類別清單
                tableId: '',
                capacity: '',
            },
            methods: {
                //添加到購物車
                addToCart(product) {
                    let cartItem = this.cart.find(item => item.productId === product.productId);
                    if (cartItem) {
                        cartItem.quantity++;
                    } else {
                        this.cart.push({ ...product, quantity: 1 });
                    }
                    this.total += product.unitPrice;
                },
                //從購物車移除
                removeFromCart(product) {
                    let cartItem = this.cart.find(item => item.productId === product.productId);
                    if (cartItem) {
                        cartItem.quantity--;
                        if (cartItem.quantity === 0) {
                            this.cart = this.cart.filter(item => item.productId !== product.productId);
                        }
                        this.total -= product.unitPrice;
                    }
                },
                //取得餐點數量
                getQuantity(product) {
                    let cartItem = this.cart.find(item => item.productId === product.productId);
                    return cartItem ? cartItem.quantity : 0;
                },
                // 取得子分類名稱
                getSubCategoryName(subCategoryId) {
                    const subCategory = this.categories.flatMap(category => category.subCategories).find(subCategory => subCategory.subCategoryId === subCategoryId);
                    return subCategory ? subCategory.subCategoriesName : '';
                },
                currency: function (value) {
                    var formatter = new Intl.NumberFormat('zh-TW', {
                        style: 'currency',
                        currency: 'TWD',
                        minimumFractionDigits: 0
                    });
                    return formatter.format(value);
                },
                //使用者按下提交按鈕後，把購物車資料送出，並且清空購物車資料(watch的cart會同步把後台購物車清空）
                submit() {
                    axios.post('/OrderForHere/StartOrder/CreateOrder', this.cart).then(response => {
                        alert('訂單已送出');
                        this.cart = [];
                        this.total = 0;
                        //從後端回傳資料取得訂單編號，再透過querystring傳給下一頁
                        window.location.href = '/CheckoutPage/?orderId=' + response.data.orderId;
                    }).catch(error => {
                        alert('送出失敗');
                    });
                }
            },
            computed: {
                //利用flatmap+filter方法將符合目前所選擇大分類的對應子分類取出
                filteredSubCategories() {
                    if (this.selectedCategoryId) {
                        return this.categories.flatMap(category => category.subCategories).filter(subCategory => subCategory.categoryId === this.selectedCategoryId);
                    }
                    return [];
                },

                //利用filter方法將符合目前所選擇子分類的對應產品取出
                filteredProducts() {
                    if (this.selectedSubCategoryId) {
                        return this.products.filter(product => product.subCategoryId === this.selectedSubCategoryId);
                    }
                    return [];
                },

                //計算購物車內容的總餐點數量
                totalQuantity() {
                    if (this.cart) {
                        return this.cart.reduce((sum, item) => sum + item.quantity, 0);
                    }
                    return 0;
                }
            },
            watch: {
                //監聽大分類的變化，如果大分類被賦予新值，則預設顯示對應的第一個子分類
                selectedCategoryId: function (newValue) {
                    if (newValue) {
                        let category = this.categories.find(category => category.categoryId === newValue);
                        if (category && category.subCategories && category.subCategories.length > 0) {
                            this.selectedSubCategoryId = category.subCategories[0].subCategoryId;
                        } 
                    }
                },
                //監聽購物車內容的變化，並將變化後的內容傳送至後端
                cart: {
                    handler: function (after, before) {
                        fetch('/api/cart', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(after)
                        });
                    },
                    deep: true
                }
            },
            created: function () {
                axios.get('/OrderForHere/StartOrder/CategoriesWithSubs')
                    .then(response => this.categories = response.data)
                    .catch(err => console.error(err));
                axios.get('/OrderForHere/StartOrder/Products')
                    .then(response => this.products = response.data)
                    .catch(err => console.error(err));
            },
            mounted: function () {
                let self = this;
                axios.get('/api/OrderLoginApi/GetTableInfo')
                    .then(response => {
                        self.tableId = response.data.tableNumber;
                        self.capacity = response.data.partySize;
                    })
            }
        });
    </script>

}