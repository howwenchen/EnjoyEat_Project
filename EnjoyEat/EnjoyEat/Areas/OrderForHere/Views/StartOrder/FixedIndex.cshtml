@using EnjoyEat.Areas.OrderForHere
@{
    ViewData["Title"] = "ShoppingCart";
    Layout = "\\areas\\orderforhere\\views\\shared\\_layout.cshtml";
}

<div id="app">
    <!-- Dropdown for meal types -->
    <select v-model="selectedMealType">
        <option disabled value="">Please select one</option>
        <option v-for="type in mealTypes" :value="type">{{ type }}</option>
    </select>
    <!-- Product list -->
    <div v-for="product in products" :key="product.id">
        <img :src="product.image" :alt="product.name" width="100">
        <p>{{ product.name }} - {{ product.price }}</p>
        <button @@click="addToCart(product)">Add to Cart</button>
    </div>

    <!-- Cart -->
    <div v-for="item in cart" :key="item.id">
        <p>{{ item.name }} - {{ item.price }} x {{ item.quantity }}</p>
    </div>

    <!-- Total -->
    <p>Total: {{ total }}</p>
</div>

@section Scripts{

<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
<script>
    new Vue({
        el: '#app',
        data: {
            products: [
                // These should be fetched from your server
                { id: 1, name: 'Red Velvet', price: 5, image: '/path/to/red_velvet.jpg' },
                { id: 2, name: 'Cup Cake', price: 7, image: '/path/to/cup_cake.jpg' },
                { id: 3, name: 'Biscuit', price: 3, image: '/path/to/biscuit.jpg' },
            ],
            cart: [],
            total: 0,
            selectedMealType: '',
            mealTypes: ['Red Velvet', 'Cup Cake', 'Biscuit']
        },
        methods: {
            addToCart(product) {
                // Check if product is already in cart
                let cartItem = this.cart.find(item => item.id === product.id);
                if (cartItem) {
                    // If product is already in cart, increase quantity
                    cartItem.quantity++;
                } else {
                    // If product is not in cart, add it
                    this.cart.push({ ...product, quantity: 1 });
                }

                // Update total price
                this.total += product.price;
            }
        }, 
        watch: {
            cart: {
                handler: function (after, before) {
                    // Update cart on server when it changes
                    fetch('/api/cart', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(after)
                    });
                },
                deep: true
            }
        },
        created: function () {
            // Fetch meal types from server when component is created
            fetch('/api/mealtypes')
                .then(response => response.json())
                .then(data => this.mealTypes = data);
        }
    });
</script>
}